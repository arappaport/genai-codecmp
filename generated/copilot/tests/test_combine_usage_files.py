# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: combine_usage_files_prompt.txt  Version: 1.0
# Generated by: Microsoft Copilot (GPT-4)
# Timestamp: 2025-09-01T23:45:00Z

import os
import pytest
import pandas as pd
from tempfile import TemporaryDirectory
from pathlib import Path
from combine_usage_files import combine_usage_files


def create_test_file(path: Path, filename: str, content: pd.DataFrame, file_type: str):
    full_path = path / filename
    if file_type == 'csv':
        content.to_csv(full_path, index=False)
    elif file_type == 'excel':
        content.to_excel(full_path, index=False)


def test_valid_csv_and_excel_combination():
    with TemporaryDirectory() as tmpdir:
        tmp_path = Path(tmpdir)
        df1 = pd.DataFrame({'Name': ['Alice'], 'Login Date': [pd.Timestamp('2025-08-01')]})
        df2 = pd.DataFrame({'Name': ['Bob'], 'Access Date': [pd.Timestamp('2025-08-02')]})

        create_test_file(tmp_path, 'file1.csv', df1, 'csv')
        create_test_file(tmp_path, 'file2.xlsx', df2, 'excel')

        result = combine_usage_files(tmp_path)

        assert 'file' in result.columns
        assert result.shape[0] == 2
        assert set(result['file']) == {'file1.csv', 'file2.xlsx'}
        assert '2025-08-01' in result.values or '2025-08-02' in result.values


def test_invalid_path_type():
    with pytest.raises(TypeError, match="Path must be a string or PathLike object."):
        combine_usage_files(123)


def test_nonexistent_directory():
    with pytest.raises(ValueError, match="Provided path does not exist or is not a directory"):
        combine_usage_files("/non/existent/path")


def test_no_valid_files():
    with TemporaryDirectory() as tmpdir:
        tmp_path = Path(tmpdir)
        (tmp_path / "readme.txt").write_text("Just a text file")
        with pytest.raises(ValueError, match="No CSV or Excel files found in directory"):
            combine_usage_files(tmp_path)


def test_file_with_invalid_format():
    with TemporaryDirectory() as tmpdir:
        tmp_path = Path(tmpdir)
        (tmp_path / "bad.csv").write_text("not,a,valid\n1,2,3")
        result = combine_usage_files(tmp_path)
        assert 'file' in result.columns
        assert result.shape[0] == 1


def test_date_column_normalization():
    with TemporaryDirectory() as tmpdir:
        tmp_path = Path(tmpdir)
        df = pd.DataFrame({'Event Date': ['2025-08-01 12:34:56', '2025-08-02']})
        create_test_file(tmp_path, 'dates.csv', df, 'csv')

        result = combine_usage_files(tmp_path)
        assert result['Event Date'].tolist() == ['2025-08-01', '2025-08-02']
