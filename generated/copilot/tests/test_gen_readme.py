# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: gen_readme.txt  Version: 1.0
# Generated by: Copilot v1.0
# Timestamp: 2025-08-16T17:00:00Z

import pytest
import pandas as pd
from gen_readme_df import gen_readme_df


def test_valid_matrix_strings_and_none():
    values = [
        ["Title", 123, None],
        [None, "some value", "a note"],
        ["X", None, 3.14],
    ]
    df = gen_readme_df(values)
    expected = pd.DataFrame(
        [
            ["Title", "123", ""],
            ["", "some value", "a note"],
            ["X", "", "3.14"],
        ],
        columns=["README", "Value", "Notes"],
    )
    pd.testing.assert_frame_equal(df, expected)


def test_valid_matrix_all_types():
    values = [
        [True, False, 0],
        [3.1415, None, ["list", "inside"]],
    ]
    df = gen_readme_df(values)
    expected = pd.DataFrame(
        [
            ["True", "False", "0"],
            ["3.1415", "", "['list', 'inside']"],
        ],
        columns=["README", "Value", "Notes"],
    )
    pd.testing.assert_frame_equal(df, expected)


def test_empty_values_raises_value_error():
    with pytest.raises(ValueError) as excinfo:
        gen_readme_df([])
    assert "must not be empty" in str(excinfo.value)


@pytest.mark.parametrize("bad_values", [None, "not a list", 123, {"a": 1}])
def test_non_list_values_type_error(bad_values):
    with pytest.raises(TypeError) as excinfo:
        gen_readme_df(bad_values)  # type: ignore
    assert "values must be a list of lists" in str(excinfo.value)


def test_row_not_list_raises_type_error():
    values = [
        ["a", "b", "c"],
        "not a row",  # invalid row
    ]
    with pytest.raises(TypeError) as excinfo:
        gen_readme_df(values)  # type: ignore
    assert "Row 1 is not a list" in str(excinfo.value)


@pytest.mark.parametrize("row", [[1, 2], [1, 2, 3, 4]])
def test_wrong_length_row_raises_value_error(row):
    values = [
        ["ok", "ok", "ok"],
        row,
    ]
    with pytest.raises(ValueError) as excinfo:
        gen_readme_df(values)
    assert "does not have exactly three elements" in str(excinfo.value)