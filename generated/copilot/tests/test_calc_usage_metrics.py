# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: calc_usage_metrics.txt  Version: 1.1
# Generated by: Microsoft Copilot (GPT-4)
# Timestamp: 2025-08-17T23:38:00Z

import pytest
import pandas as pd
from calc_usage_metrics import calc_usage_metrics


def test_valid_input_transformation():
    data = {
        'User Principal Name': ['user1', 'user2', 'user3'],
        'Display Name': ['User One', 'User Two', 'User Three'],
        'Last Activity Date': ['2025-08-01', 'Resigned', None]
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    assert list(result.columns) == [
        'User Principal Name',
        'Minimum Activity Date',
        'Maximum Activity Date',
        'ever_active',
        'active_days_range',
        'days_since_last_use'
    ]
    assert result.shape == (3, 6)
    assert result['Maximum Activity Date'].tolist() == ['2025-08-01', 'never', 'never']
    assert result['ever_active'].tolist() == [1, 0, 0]
    assert result['active_days_range'].tolist() == [1, 0, 0]
    assert result['days_since_last_use'].tolist() == [0, 0, 0]


def test_multiple_entries_per_user():
    data = {
        'User Principal Name': ['user1', 'user1'],
        'Display Name': ['User One', 'User One'],
        'Last Activity Date': ['2025-08-01', '2025-08-03']
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    assert result.shape == (1, 6)
    assert result['Minimum Activity Date'].iloc[0] == '2025-08-01'
    assert result['Maximum Activity Date'].iloc[0] == '2025-08-03'
    assert result['active_days_range'].iloc[0] == 3
    assert result['days_since_last_use'].iloc[0] == 0


def test_missing_required_columns():
    df = pd.DataFrame({'User Principal Name': ['user1'], 'Last Activity Date': ['2025-08-01']})
    with pytest.raises(ValueError, match="Missing required columns: {'Display Name'}"):
        calc_usage_metrics(df)


def test_empty_dataframe():
    df = pd.DataFrame(columns=['User Principal Name', 'Display Name', 'Last Activity Date'])
    with pytest.raises(ValueError, match="Input DataFrame must not be empty."):
        calc_usage_metrics(df)


def test_invalid_input_type():
    with pytest.raises(TypeError, match="Input must be a pandas DataFrame."):
        calc_usage_metrics("not a dataframe")


def test_all_never_dates():
    data = {
        'User Principal Name': ['user1', 'user2'],
        'Display Name': ['User One', 'User Two'],
        'Last Activity Date': ['Resigned', None]
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    assert result['ever_active'].sum() == 0
    assert result['active_days_range'].sum() == 0
    assert result['days_since_last_use'].sum() == 0
