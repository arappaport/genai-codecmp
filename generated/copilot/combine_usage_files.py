# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: combine_usage_files_prompt.txt  Version: 1.0
# Generated by: Microsoft Copilot (GPT-4)
# Timestamp: 2025-09-01T23:45:00Z

import os
import logging
from typing import Union
import pandas as pd

# Configure debug logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


def combine_usage_files(path: Union[str, os.PathLike]) -> pd.DataFrame:
    """Combine all CSV and Excel files in a directory into a single DataFrame.

    Each file is loaded, tagged with its filename, and date columns are normalized.

    Args:
        path (Union[str, os.PathLike]): Path to an existing directory containing usage files.

    Returns:
        pd.DataFrame: Combined DataFrame with normalized date columns and file source tags.

    Raises:
        TypeError: If path is not a string or PathLike.
        ValueError: If path does not exist or contains no valid files.
        RuntimeError: If any file fails to load or process.
    """
    if not isinstance(path, (str, os.PathLike)):
        raise TypeError("Path must be a string or PathLike object.")

    if not os.path.isdir(path):
        raise ValueError(f"Provided path does not exist or is not a directory: {path}")

    df_combined = pd.DataFrame()
    files_found = False

    for filename in os.listdir(path):
        full_path = os.path.join(path, filename)
        if not os.path.isfile(full_path):
            continue

        try:
            if filename.lower().endswith('.csv'):
                logger.debug(f"Loading CSV file: {filename}")
                df_tmp = pd.read_csv(full_path)
            elif filename.lower().endswith(('.xls', '.xlsx')):
                logger.debug(f"Loading Excel file: {filename}")
                df_tmp = pd.read_excel(full_path)
            else:
                logger.debug(f"Skipping unsupported file: {filename}")
                continue

            files_found = True
            df_tmp['file'] = filename  # Add filename column

            # Normalize date columns
            for col in df_tmp.columns:
                if pd.api.types.is_datetime64_any_dtype(df_tmp[col]) or 'date' in col.lower():
                    logger.debug(f"Normalizing date column: {col}")
                    df_tmp[col] = pd.to_datetime(df_tmp[col], errors='coerce').dt.strftime('%Y-%m-%d')

            df_combined = pd.concat([df_combined, df_tmp], ignore_index=True)

        except Exception as e:
            logger.error(f"Failed to process file {filename}: {e}")
            raise RuntimeError(f"Error processing file {filename}: {e}") from e

    if not files_found:
        raise ValueError(f"No CSV or Excel files found in directory: {path}")

    return df_combined