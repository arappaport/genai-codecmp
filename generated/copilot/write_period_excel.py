# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: write_period_excel_prompt.txt  Version: 1.1
# Generated by: Copilot v1.0
# Timestamp: 2025-08-16T16:01:00Z

from typing import Any
import pandas as pd


def write_period_excel(df_readme: pd.DataFrame, df: pd.DataFrame, path: str) -> None:
    """Write summary Excel file with multiple sheets.

    Creates an Excel file at `path` with four sheets:
      - README: contents of `df_readme`
      - users: per-user summary (unique apps and total requests)
      - apps: per-app summary (unique users and total requests)
      - data: original `df`

    Args:
        df_readme (pd.DataFrame): DataFrame for the README sheet. Must not be empty.
        df (pd.DataFrame): DataFrame with columns 'app', 'user', 'count'.
        path (str): File path where Excel file will be saved.

    Raises:
        TypeError: If inputs are not of expected types.
        ValueError: If `df_readme` is empty or `df` lacks required columns.
        Exception: If writing the Excel file fails.
    """
    # Input type checks
    if not isinstance(df_readme, pd.DataFrame):
        raise TypeError("df_readme must be a pandas DataFrame")
    if not isinstance(df, pd.DataFrame):
        raise TypeError("df must be a pandas DataFrame")
    if not isinstance(path, str):
        raise TypeError("path must be a string")

    # Content validations
    if df_readme.empty:
        raise ValueError("df_readme must not be empty")

    required_cols = {"app", "user", "count"}
    missing = required_cols - set(df.columns)
    if missing:
        raise ValueError(f"df is missing required columns: {missing}")

    # Build per-user summary
    df_users = (
        df
        .groupby("user")
        .agg(
            apps=pd.NamedAgg(column="app", aggfunc=lambda x: x.nunique()),
            reqs=pd.NamedAgg(column="count", aggfunc="sum"),
        )
        .sort_values("apps", ascending=False)
        .reset_index()
    )

    # Build per-app summary
    df_apps = (
        df
        .groupby("app")
        .agg(
            users=pd.NamedAgg(column="user", aggfunc=lambda x: x.nunique()),
            reqs=pd.NamedAgg(column="count", aggfunc="sum"),
        )
        .sort_values("users", ascending=False)
        .reset_index()
    )

    # Write to Excel
    try:
        with pd.ExcelWriter(path, engine="openpyxl", date_format="YYYY-MM-DD") as writer:
            df_readme.to_excel(writer, sheet_name="README", index=False)
            df_users.to_excel(writer, sheet_name="users", index=False)
            df_apps.to_excel(writer, sheet_name="apps", index=False)
            df.to_excel(writer, sheet_name="data", index=False)
    except Exception as exc:
        raise Exception(f"Failed to write Excel file to '{path}': {exc}")