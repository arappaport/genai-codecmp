# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: write_period_excel_prompt.txt  Version: 1.1
# Generated by: Grok built by xAI
# Timestamp: 2025-08-17T16:29:00Z

from typing import Optional
import pandas as pd
from openpyxl import Workbook

def write_period_excel(df_readme: pd.DataFrame, df: pd.DataFrame, path: str) -> None:
    """Writes processed DataFrames to an Excel file with multiple sheets.

    Args:
        df_readme: DataFrame containing README information.
        df: DataFrame with columns 'app', 'user', and 'count'.
        path: File path where the Excel file will be saved.

    Raises:
        TypeError: If inputs do not match expected types.
        ValueError: If DataFrames are empty or df lacks required columns.
        OSError: If there are issues writing to the file path.
    """
    # Type validation
    if not isinstance(df_readme, pd.DataFrame):
        raise TypeError("df_readme must be a pandas DataFrame")
    if not isinstance(df, pd.DataFrame):
        raise TypeError("df must be a pandas DataFrame")
    if not isinstance(path, str):
        raise TypeError("path must be a string")

    # DataFrame emptiness check
    if df_readme.empty:
        raise ValueError("df_readme DataFrame is empty")
    if df.empty:
        raise ValueError("df DataFrame is empty")

    # Validate required columns in df
    required_columns = {"app", "user", "count"}
    if not all(col in df.columns for col in required_columns):
        raise ValueError(f"df must contain columns: {required_columns}")

    # Create df_users: unique apps and sum of counts per user
    df_users = (
        df.groupby("user")
        .agg(apps=("app", "nunique"), reqs=("count", "sum"))
        .reset_index()
        .sort_values(by="apps", ascending=False)
    )

    # Create df_apps: unique users and sum of counts per app
    df_apps = (
        df.groupby("app")
        .agg(users=("user", "nunique"), reqs=("count", "sum"))
        .reset_index()
        .sort_values(by="users", ascending=False)
    )

    # Write to Excel
    try:
        with pd.ExcelWriter(
            path, engine="openpyxl", date_format="YYYY-MM-DD"
        ) as writer:
            df_readme.to_excel(writer, sheet_name="README", index=False)
            df_users.to_excel(writer, sheet_name="users", index=False)
            df_apps.to_excel(writer, sheet_name="apps", index=False)
            df.to_excel(writer, sheet_name="data", index=False)
    except OSError as e:
        raise OSError(f"Failed to write Excel file to {path}: {str(e)}") from e