# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: calc_app_usage_metrics.txt  Version: 1.1
# Generated by: Grok, created by xAI
# Timestamp: 2025-09-01T23:59:00Z

import pandas as pd
from pandas import DataFrame
from typing import List


def calc_app_usage_metrics(df: DataFrame) -> DataFrame:
    """Calculate application usage metrics from a DataFrame.

    Args:
        df (DataFrame): Input DataFrame containing 'User Principal Name' and
            application last activity date columns.

    Returns:
        DataFrame: Processed DataFrame with usage metrics (0/1 values) per user.

    Raises:
        TypeError: If df is not a pandas DataFrame.
        ValueError: If df is empty or missing required column 'User Principal Name'.
    """
    # Input validation
    if not isinstance(df, DataFrame):
        raise TypeError("Input 'df' must be a pandas DataFrame")
    if df.empty:
        raise ValueError("Input DataFrame cannot be empty")
    if 'User Principal Name' not in df.columns:
        raise ValueError("DataFrame must contain 'User Principal Name' column")

    # Constants for column filtering
    col_prefix: str = "Last activity date of "
    col_postfix: str = " (UTC)"

    # Create a copy of the DataFrame
    df_apps: DataFrame = df.copy()

    # Filter columns to keep only 'User Principal Name' and those matching prefix/postfix
    columns_to_keep: List[str] = [
        col for col in df_apps.columns
        if col == 'User Principal Name' or
           (col.startswith(col_prefix) and col.endswith(col_postfix))
    ]
    if not columns_to_keep:
        raise ValueError("No columns match the required prefix and postfix pattern")
    df_apps = df_apps[columns_to_keep]

    # Group by User Principal Name and get maximum value for each column
    df_apps = df_apps.groupby('User Principal Name').max().reset_index()

    # Process non-User Principal Name columns
    for col in df_apps.columns:
        if col != 'User Principal Name':
            # Replace non-blank values with 1, then replace 1 with 0
            df_apps[col] = df_apps[col].notna().astype(int)
            df_apps[col] = df_apps[col].replace(1, 0)

            # Rename column by removing prefix and postfix
            new_col_name = col[len(col_prefix):-len(col_postfix)]
            df_apps.rename(columns={col: new_col_name}, inplace=True)

    return df_apps