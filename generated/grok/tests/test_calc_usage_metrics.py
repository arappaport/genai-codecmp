# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: calc_usage_metrics.txt  Version: 1.1
# Generated by: Grok, created by xAI
# Timestamp: 2025-09-01T23:59:00Z

import pytest
import pandas as pd
from pandas import DataFrame
from datetime import datetime
from calc_usage_metrics import calc_usage_metrics


def test_valid_input():
    """Test with valid input DataFrame."""
    data = {
        'User Principal Name': ['user1@example.com', 'user1@example.com', 'user2@example.com'],
        'Display Name': ['User One', 'User One', 'User Two'],
        'Last Activity Date': ['2023-01-01', '2023-01-15', '2023-02-01']
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'Minimum Activity Date': ['2023-01-01', '2023-02-01'],
        'Maximum Activity Date': ['2023-01-15', '2023-02-01'],
        'Display Name': ['User One', 'User Two'],
        'ever_active': [1, 1],
        'active_days_range': [15, 1],
        'days_since_last_use': [17, 0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_empty_dataframe():
    """Test with empty DataFrame."""
    df = pd.DataFrame()
    with pytest.raises(ValueError, match="Input DataFrame cannot be empty"):
        calc_usage_metrics(df)


def test_missing_required_columns():
    """Test with missing required columns."""
    data = {
        'User Principal Name': ['user1@example.com'],
        'Last Activity Date': ['2023-01-01']
    }
    df = pd.DataFrame(data)
    with pytest.raises(ValueError, match="DataFrame missing required columns: Display Name"):
        calc_usage_metrics(df)


def test_invalid_input_type():
    """Test with non-DataFrame input."""
    with pytest.raises(TypeError, match="Input 'df' must be a pandas DataFrame"):
        calc_usage_metrics([1, 2, 3])


def test_resigned_and_null_values():
    """Test with 'Resigned' and null values in Last Activity Date."""
    data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'Display Name': ['User One', 'User Two'],
        'Last Activity Date': ['Resigned', None]
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'Minimum Activity Date': ['never', 'never'],
        'Maximum Activity Date': ['never', 'never'],
        'Display Name': ['User One', 'User Two'],
        'ever_active': [0, 0],
        'active_days_range': [0, 0],
        'days_since_last_use': [0, 0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_invalid_date_format():
    """Test with invalid date formats."""
    data = {
        'User Principal Name': ['user1@example.com'],
        'Display Name': ['User One'],
        'Last Activity Date': ['invalid-date']
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com'],
        'Minimum Activity Date': ['never'],
        'Maximum Activity Date': ['never'],
        'Display Name': ['User One'],
        'ever_active': [0],
        'active_days_range': [0],
        'days_since_last_use': [0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_mixed_date_formats():
    """Test with mixed date formats."""
    data = {
        'User Principal Name': ['user1@example.com', 'user1@example.com'],
        'Display Name': ['User One', 'User One'],
        'Last Activity Date': ['2023-01-01 12:00:00', '01/15/2023']
    }
    df = pd.DataFrame(data)
    result = calc_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com'],
        'Minimum Activity Date': ['2023-01-01'],
        'Maximum Activity Date': ['2023-01-15'],
        'Display Name': ['User One'],
        'ever_active': [1],
        'active_days_range': [15],
        'days_since_last_use': [0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)