# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: write_period_excel_prompt.txt  Version: 1.1
# Generated by: Grok built by xAI
# Timestamp: 2025-08-17T16:29:00Z

import pytest
import pandas as pd
import os
from write_period_excel import write_period_excel


@pytest.fixture
def sample_data():
    """Fixture providing sample DataFrames for testing."""
    df_readme = pd.DataFrame({"info": ["Description", "Test"]})
    df = pd.DataFrame(
        {
            "app": ["app1", "app1", "app2", "app3"],
            "user": ["user1", "user2", "user1", "user3"],
            "count": [10, 20, 15, 5],
        }
    )
    return df_readme, df


@pytest.fixture
def temp_file(tmp_path):
    """Fixture providing a temporary file path."""
    return str(tmp_path / "test_output.xlsx")


def test_write_period_excel_success(sample_data, temp_file):
    """Test successful execution of write_period_excel."""
    df_readme, df = sample_data
    write_period_excel(df_readme, df, temp_file)

    assert os.path.exists(temp_file)

    # Verify contents
    with pd.ExcelFile(temp_file) as xls:
        assert set(xls.sheet_names) == {"README", "users", "apps", "data"}

        # Verify README sheet
        readme_df = pd.read_excel(xls, sheet_name="README")
        assert len(readme_df) == len(df_readme)

        # Verify users sheet
        users_df = pd.read_excel(xls, sheet_name="users")
        assert set(users_df.columns) == {"user", "apps", "reqs"}
        assert len(users_df) == 3  # 3 unique users
        assert users_df["apps"].max() <= 3  # Max 3 unique apps

        # Verify apps sheet
        apps_df = pd.read_excel(xls, sheet_name="apps")
        assert set(apps_df.columns) == {"app", "users", "reqs"}
        assert len(apps_df) == 3  # 3 unique apps

        # Verify data sheet
        data_df = pd.read_excel(xls, sheet_name="data")
        assert len(data_df) == len(df)


def test_empty_df_readme(sample_data, temp_file):
    """Test error handling for empty df_readme."""
    _, df = sample_data
    empty_df = pd.DataFrame()
    with pytest.raises(ValueError, match="df_readme DataFrame is empty"):
        write_period_excel(empty_df, df, temp_file)


def test_empty_df(sample_data, temp_file):
    """Test error handling for empty df."""
    df_readme, _ = sample_data
    empty_df = pd.DataFrame()
    with pytest.raises(ValueError, match="df DataFrame is empty"):
        write_period_excel(df_readme, empty_df, temp_file)


def test_missing_columns(sample_data, temp_file):
    """Test error handling for missing required columns in df."""
    df_readme, _ = sample_data
    invalid_df = pd.DataFrame({"x": [1, 2], "y": [3, 4]})
    with pytest.raises(ValueError, match="df must contain columns"):
        write_period_excel(df_readme, invalid_df, temp_file)


def test_invalid_df_readme_type(sample_data, temp_file):
    """Test error handling for invalid df_readme type."""
    _, df = sample_data
    with pytest.raises(TypeError, match="df_readme must be a pandas DataFrame"):
        write_period_excel([1, 2, 3], df, temp_file)


def test_invalid_df_type(sample_data, temp_file):
    """Test error handling for invalid df type."""
    df_readme, _ = sample_data
    with pytest.raises(TypeError, match="df must be a pandas DataFrame"):
        write_period_excel(df_readme, {"app": [1, 2]}, temp_file)


def test_invalid_path_type(sample_data):
    """Test error handling for invalid path type."""
    df_readme, df = sample_data
    with pytest.raises(TypeError, match="path must be a string"):
        write_period_excel(df_readme, df, 123)


def test_invalid_file_path(sample_data):
    """Test error handling for invalid file path."""
    df_readme, df = sample_data
    invalid_path = "/invalid/path/test.xlsx"
    with pytest.raises(OSError, match="Failed to write Excel file"):
        write_period_excel(df_readme, df, invalid_path)