# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: combine_usage_files_prompt.txt  Version: 1.0
# Generated by: Grok, created by xAI
# Timestamp: 2025-09-02T00:05:00Z

import pytest
import pandas as pd
from pandas import DataFrame
from pathlib import Path
import os
import tempfile
from combine_usage_files import combine_usage_files
import logging

# Configure logging for tests
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@pytest.fixture
def temp_dir():
    """Create a temporary directory for test files."""
    with tempfile.TemporaryDirectory() as tmpdirname:
        yield Path(tmpdirname)


def test_valid_csv_files(temp_dir):
    """Test combining multiple valid CSV files."""
    # Create test CSV files
    df1 = pd.DataFrame({
        'name': ['Alice', 'Bob'],
        'date': ['2023-01-01', '2023-01-02']
    })
    df2 = pd.DataFrame({
        'name': ['Charlie'],
        'date': ['2023-01-03']
    })
    df1.to_csv(temp_dir / 'file1.csv', index=False)
    df2.to_csv(temp_dir / 'file2.csv', index=False)

    logger.debug("Created test CSV files in %s", temp_dir)

    result = combine_usage_files(temp_dir)

    expected = pd.DataFrame({
        'name': ['Alice', 'Bob', 'Charlie'],
        'date': ['2023-01-01', '2023-01-02', '2023-01-03'],
        'file': ['file1.csv', 'file1.csv', 'file2.csv']
    })

    logger.debug("Comparing result with expected DataFrame")
    pd.testing.assert_frame_equal(result, expected)


def test_valid_excel_files(temp_dir):
    """Test combining multiple valid Excel files."""
    df1 = pd.DataFrame({
        'name': ['Alice'],
        'date': ['2023-01-01']
    })
    df2 = pd.DataFrame({
        'name': ['Bob'],
        'date': ['2023-01-02']
    })
    df1.to_excel(temp_dir / 'file1.xlsx', index=False)
    df2.to_excel(temp_dir / 'file2.xlsx', index=False)

    logger.debug("Created test Excel files in %s", temp_dir)

    result = combine_usage_files(temp_dir)

    expected = pd.DataFrame({
        'name': ['Alice', 'Bob'],
        'date': ['2023-01-01', '2023-01-02'],
        'file': ['file1.xlsx', 'file2.xlsx']
    })

    logger.debug("Comparing result with expected DataFrame")
    pd.testing.assert_frame_equal(result, expected)


def test_mixed_file_types(temp_dir):
    """Test combining CSV and Excel files."""
    df1 = pd.DataFrame({
        'name': ['Alice'],
        'date': ['2023-01-01']
    })
    df2 = pd.DataFrame({
        'name': ['Bob'],
        'date': ['2023-01-02']
    })
    df1.to_csv(temp_dir / 'file1.csv', index=False)
    df2.to_excel(temp_dir / 'file2.xlsx', index=False)

    logger.debug("Created mixed test files in %s", temp_dir)

    result = combine_usage_files(temp_dir)

    expected = pd.DataFrame({
        'name': ['Alice', 'Bob'],
        'date': ['2023-01-01', '2023-01-02'],
        'file': ['file1.csv', 'file2.xlsx']
    })

    logger.debug("Comparing result with expected DataFrame")
    pd.testing.assert_frame_equal(result, expected)


def test_invalid_path():
    """Test with non-existent path."""
    invalid_path = Path("/non/existent/path")
    logger.debug("Testing invalid path: %s", invalid_path)
    with pytest.raises(ValueError, match="Path does not exist"):
        combine_usage_files(invalid_path)


def test_not_directory(temp_dir):
    """Test with path that is a file, not a directory."""
    file_path = temp_dir / "test.csv"
    pd.DataFrame({'name': ['Alice']}).to_csv(file_path, index=False)
    logger.debug("Testing file path instead of directory: %s", file_path)
    with pytest.raises(ValueError, match="Path is not a directory"):
        combine_usage_files(file_path)


def test_no_valid_files(temp_dir):
    """Test with directory containing no CSV or Excel files."""
    (temp_dir / "test.txt").write_text("test")
    logger.debug("Testing directory with no valid files: %s", temp_dir)
    with pytest.raises(ValueError, match="No valid CSV or Excel files found in directory"):
        combine_usage_files(temp_dir)


def test_invalid_file_format(temp_dir):
    """Test with corrupted or invalid file."""
    (temp_dir / "corrupt.csv").write_text("invalid,csv,content\n1,2,3")
    logger.debug("Testing directory with invalid CSV file: %s", temp_dir)
    with pytest.raises(RuntimeError, match="Error processing file"):
        combine_usage_files(temp_dir)


def test_date_format_conversion(temp_dir):
    """Test proper date format conversion."""
    df = pd.DataFrame({
        'name': ['Alice'],
        'date': [pd.Timestamp('2023-01-01 12:00:00')]
    })
    df.to_csv(temp_dir / 'file1.csv', index=False)

    logger.debug("Testing date format conversion in %s", temp_dir)

    result = combine_usage_files(temp_dir)

    expected = pd.DataFrame({
        'name': ['Alice'],
        'date': ['2023-01-01'],
        'file': ['file1.csv']
    })

    logger.debug("Comparing result with expected DataFrame")
    pd.testing.assert_frame_equal(result, expected)


def test_invalid_input_type():
    """Test with invalid input type."""
    logger.debug("Testing invalid input type")
    with pytest.raises(TypeError, match="Input 'path' must be a string or Path object"):
        combine_usage_files(123)