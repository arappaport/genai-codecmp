# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: count_app_users.txt  Version: 1.1
# Generated by: Grok, created by xAI
# Timestamp: 2025-09-02T00:08:00Z

import pytest
import pandas as pd
from pandas import DataFrame
from count_app_users import count_app_users


def test_valid_input_single_column():
    """Test with a single column DataFrame."""
    data = {
        'App1': [1, 0, 1]
    }
    df = pd.DataFrame(data)
    result = count_app_users(df)

    expected = [
        {'app': 'App1', 'nusers': 2, 'percusers': 2 / 3}
    ]

    assert result == expected


def test_valid_input_multiple_columns():
    """Test with multiple columns in DataFrame."""
    data = {
        'App1': [1, 0, 1],
        'App2': [0, 1, 0],
        'App3': [1, 1, 1]
    }
    df = pd.DataFrame(data)
    result = count_app_users(df)

    expected = [
        {'app': 'App1', 'nusers': 2, 'percusers': 2 / 3},
        {'app': 'App2', 'nusers': 1, 'percusers': 1 / 3},
        {'app': 'App3', 'nusers': 3, 'percusers': 1.0}
    ]

    assert result == expected


def test_empty_dataframe():
    """Test with empty DataFrame."""
    df = pd.DataFrame()
    with pytest.raises(ValueError, match="Input DataFrame cannot be empty"):
        count_app_users(df)


def test_no_columns():
    """Test with DataFrame containing no columns."""
    df = pd.DataFrame(index=[0, 1, 2])
    with pytest.raises(ValueError, match="Input DataFrame must have at least one column"):
        count_app_users(df)


def test_invalid_input_type():
    """Test with non-DataFrame input."""
    with pytest.raises(TypeError, match="Input 'df' must be a pandas DataFrame"):
        count_app_users([1, 2, 3])


def test_zero_values():
    """Test with columns containing all zero values."""
    data = {
        'App1': [0, 0, 0],
        'App2': [0, 0, 0]
    }
    df = pd.DataFrame(data)
    result = count_app_users(df)

    expected = [
        {'app': 'App1', 'nusers': 0, 'percusers': 0.0},
        {'app': 'App2', 'nusers': 0, 'percusers': 0.0}
    ]

    assert result == expected


def test_mixed_values():
    """Test with mixed numeric values."""
    data = {
        'App1': [1, 0, 2],
        'App2': [3, 0, 1]
    }
    df = pd.DataFrame(data)
    result = count_app_users(df)

    expected = [
        {'app': 'App1', 'nusers': 3, 'percusers': 1.0},
        {'app': 'App2', 'nusers': 4, 'percusers': 4 / 3}
    ]

    assert result == expected


def test_single_row():
    """Test with a single row DataFrame."""
    data = {
        'App1': [1],
        'App2': [0]
    }
    df = pd.DataFrame(data)
    result = count_app_users(df)

    expected = [
        {'app': 'App1', 'nusers': 1, 'percusers': 1.0},
        {'app': 'App2', 'nusers': 0, 'percusers': 0.0}
    ]

    assert result == expected
