# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: gen_readme.txt  Version: 1.0
# Generated by: Grok built by xAI
# Timestamp: 2025-08-17T16:34:00Z

import pytest
import pandas as pd
from gen_readme_df import gen_readme_df


@pytest.fixture
def sample_values():
    """Fixture providing sample list of lists for testing."""
    return [
        ["Info1", 42, "Note1"],
        ["Info2", None, "Note2"],
        ["Info3", "Value3", None]
    ]


def test_gen_readme_df_success(sample_values):
    """Test successful creation of DataFrame."""
    df = gen_readme_df(sample_values)

    # Verify DataFrame structure
    assert isinstance(df, pd.DataFrame)
    assert list(df.columns) == ["README", "Value", "Notes"]
    assert len(df) == 3

    # Verify content
    assert df.iloc[0].to_dict() == {"README": "Info1", "Value": "42", "Notes": "Note1"}
    assert df.iloc[1].to_dict() == {"README": "Info2", "Value": "", "Notes": "Note2"}
    assert df.iloc[2].to_dict() == {"README": "Info3", "Value": "Value3", "Notes": ""}


def test_empty_values_list():
    """Test error handling for empty values list."""
    with pytest.raises(ValueError, match="values list cannot be empty"):
        gen_readme_df([])


def test_invalid_values_type():
    """Test error handling for invalid values type."""
    with pytest.raises(TypeError, match="values must be a list"):
        gen_readme_df("not a list")


def test_invalid_inner_list_type():
    """Test error handling for non-list elements in values."""
    with pytest.raises(TypeError, match="Each element in values must be a list"):
        gen_readme_df([["Info1", 42, "Note1"], "not a list", ["Info3", 100, "Note3"]])


def test_insufficient_columns():
    """Test error handling for inner lists with fewer than three elements."""
    with pytest.raises(ValueError, match="Each inner list must have at least three elements"):
        gen_readme_df([["Info1", 42], ["Info2", 100]])


def test_extra_columns():
    """Test handling of lists with more than three elements."""
    values = [["Info1", 42, "Note1", "Extra"], ["Info2", 100, "Note2", "Extra2"]]
    df = gen_readme_df(values)

    # Verify only first three columns are used
    assert list(df.columns) == ["README", "Value", "Notes"]
    assert len(df) == 2
    assert df.iloc[0].to_dict() == {"README": "Info1", "Value": "42", "Notes": "Note1"}
    assert df.iloc[1].to_dict() == {"README": "Info2", "Value": "100", "Notes": "Note2"}


def test_none_and_mixed_types():
    """Test handling of None and mixed types in input."""
    values = [[1, None, 3.14], [None, "text", False]]
    df = gen_readme_df(values)

    # Verify proper conversion
    assert df.iloc[0].to_dict() == {"README": "1", "Value": "", "Notes": "3.14"}
    assert df.iloc[1].to_dict() == {"README": "", "Value": "text", "Notes": "False"}