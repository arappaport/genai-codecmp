# GENERATED FILE - DO NOT EDIT DIRECTLY.
# Prompt: calc_app_usage_metrics.txt  Version: 1.1
# Generated by: Grok, created by xAI
# Timestamp: 2025-09-01T23:59:00Z

import pytest
import pandas as pd
from pandas import DataFrame
from calc_app_usage_metrics import calc_app_usage_metrics


def test_valid_input():
    """Test with valid input DataFrame."""
    data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'Last activity date of App1 (UTC)': ['2023-01-01', None],
        'Last activity date of App2 (UTC)': [None, '2023-01-02'],
        'Other Column': ['data', 'data']
    }
    df = pd.DataFrame(data)
    result = calc_app_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'App1': [0, 0],
        'App2': [0, 0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_empty_dataframe():
    """Test with empty DataFrame."""
    df = pd.DataFrame()
    with pytest.raises(ValueError, match="Input DataFrame cannot be empty"):
        calc_app_usage_metrics(df)


def test_missing_user_principal_name():
    """Test with missing 'User Principal Name' column."""
    data = {
        'Last activity date of App1 (UTC)': ['2023-01-01'],
        'Last activity date of App2 (UTC)': [None]
    }
    df = pd.DataFrame(data)
    with pytest.raises(ValueError, match="DataFrame must contain 'User Principal Name' column"):
        calc_app_usage_metrics(df)


def test_invalid_input_type():
    """Test with non-DataFrame input."""
    with pytest.raises(TypeError, match="Input 'df' must be a pandas DataFrame"):
        calc_app_usage_metrics([1, 2, 3])


def test_no_matching_columns():
    """Test with no columns matching prefix/postfix pattern."""
    data = {
        'User Principal Name': ['user1@example.com'],
        'Random Column': ['data']
    }
    df = pd.DataFrame(data)
    with pytest.raises(ValueError, match="No columns match the required prefix and postfix pattern"):
        calc_app_usage_metrics(df)


def test_duplicate_users():
    """Test with duplicate User Principal Names."""
    data = {
        'User Principal Name': ['user1@example.com', 'user1@example.com'],
        'Last activity date of App1 (UTC)': ['2023-01-01', '2023-01-02'],
        'Last activity date of App2 (UTC)': [None, '2023-01-03']
    }
    df = pd.DataFrame(data)
    result = calc_app_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com'],
        'App1': [0],
        'App2': [0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_all_null_values():
    """Test with all null values in activity columns."""
    data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'Last activity date of App1 (UTC)': [None, None],
        'Last activity date of App2 (UTC)': [None, None]
    }
    df = pd.DataFrame(data)
    result = calc_app_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com', 'user2@example.com'],
        'App1': [0, 0],
        'App2': [0, 0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)


def test_single_app_column():
    """Test with only one application column."""
    data = {
        'User Principal Name': ['user1@example.com'],
        'Last activity date of App1 (UTC)': ['2023-01-01']
    }
    df = pd.DataFrame(data)
    result = calc_app_usage_metrics(df)

    expected_data = {
        'User Principal Name': ['user1@example.com'],
        'App1': [0]
    }
    expected = pd.DataFrame(expected_data)

    pd.testing.assert_frame_equal(result, expected)