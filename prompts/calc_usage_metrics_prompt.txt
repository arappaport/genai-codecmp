# Parameters:
prompt_name = "calc_usage_metrics.txt"
version = "1.1"
target_function_name: calc_usage_metrics

Write a production-grade Python function named {{target_function_name}} accepts:
1. A pandas DataFrame named `df`.
 - df should not be empty
  - df should contain at least these columns: 'User Principal Name', 'Display Name',  'Last Activity Date'


The function should:
- Update column named 'Last Activity Date'  in df:
    - Replace any dates with a string in the format YYYY-MM-DD
    - Truncate any column to a maximum of 10 chars.   Add a comment in code: trim down to YYY-MM-DD
    - Replace any blanks, NaN or word 'Resigned' with a value 'never'
- create a new dataframe named df_usage that contains the minimum and maximum of the 'Last Activity Date'	column for each unique 'User Principal Name'
- in df_usage:
  - create a new column named ever_active with a value of 1 if the 'Maximum Activity Date' is no blank and 0 otherwise.
  - create a new column named active_days_range with a value of the Delta of 'Maximum Activity Date' -'Minimum Activity Date'  + 1 or 0 if either 'Maximum Activity Date' or 'Minimum Activity Date'  are blank or not dates.

  - find the maximum value of any row in 'Maximum Activity Date' column.  Name this 'max_usage_date'. Treat this as a date.
  - create a new column named 'days_since_last_use' this should contain the integer delta between ech row's value of 'Maximum Activity Date' and 'max_usage_date'


  return df_usage
- error handling.   Any issues should result in raised exceptions with suitable error strings

Generate comprehensive pytests for all negative and positive cases suitable for a file named test_{{target_function_name}}.py


#### COMMON instructions BEGIN

The function must follow current Python best practices, including:
- Type hints for input and output
- A docstring formatted with Google-style conventions
- Input validation: raise `TypeError` if inputs do not match type hints
- Clear and descriptive variable names
- PEP 8 formatting and clean structure
- Ready for inclusion in a larger codebase or module
- Ensure that all required parameters are present and are of the correct python type
- Generated code should pass Pylint with a score of 9.0+ and avoid global variables
- At the top of every file generated, include a comment block with:
  - GENERATED FILE - DO NOT EDIT DIRECTLY.
  - Prompt: [prompt_name]  Version: [version]
  - Generated by:[LLM name and version].
  - Timestamp:[current time in ISO 8601 format and UTC timezone]
#### COMMON instructions END






