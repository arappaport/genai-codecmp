# Parameters:
prompt_name = "combine_usage_files_prompt.txt"
version = "1.0"
target_function_name: combine_usage_files

Write a production-grade Python function named {{target_function_name}} accepts:
1. A path named path.   This should be to an existing directory

The function will use pandas dataframe to load all excel files from a directory.

For each csv or execl file:
1. load into a dataframe named df_tmp
2. add a column as the last column named file, and add the file name to each row.
3. Covert each date column into a string in YYYY-MM-DD format
- error handling.   Any issues should result in raised exceptions with suitable error strings
Append to a dataframe named df.


return df


Generate comprehensive pytests for all negative and positive cases suitable for a file named test_{{target_function_name}}.py

Include extensive debug logging.






#### COMMON instructions BEGIN

The function must follow current Python best practices, including:
- Type hints for input and output
- A docstring formatted with Google-style conventions
- Input validation: raise `TypeError` if inputs do not match type hints
- Clear and descriptive variable names
- PEP 8 formatting and clean structure
- Ready for inclusion in a larger codebase or module
- Ensure that all required parameters are present and are of the correct python type
- Generated code should pass Pylint with a score of 9.0+ and avoid global variables
- At the top of every file generated, include a comment block with:
  - GENERATED FILE - DO NOT EDIT DIRECTLY.
  - Prompt: [prompt_name]  Version: [version]
  - Generated by:[LLM name and version].
  - Timestamp:[current time in ISO 8601 format and UTC timezone]
#### COMMON instructions END

