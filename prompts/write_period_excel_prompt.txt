# Parameters:
prompt_name = "write_period_excel_prompt.txt"
version = "1.1"
target_function_name: "write_period_excel"

Write a production-grade Python function named {{target_function_name}} accepts:
1. A pandas DataFrame named `df_readme`.  It should not be empty.
2. A pandas DataFrame named `df`, containing three columns: `'app'`, `'user'`, and `'count'`.
3. A string named `path`, which describes the file path where an Excel file should be saved.

The function should:
- Create a new DataFrame named `df_users`. `df_users` should contain the number of unique apps used per user (i.e. count of distinct `'app'` values per `'user'`) in a column named apps, and the sum of 'count' per user in a column named reqs. Sort by the apps column descending.
- Create a new DataFrame named `df_apps`. `df_apps` should contain the number of unique users per app (i.e. count of distinct `'user'` values per `'app'`) in a column named users, and the sum of 'count' per app in a column named reqs. Sort by the users column descending.
- Create new Excel file at the location specified by the `path` parameter.
-  Write dataframe 'df_readme' to a sheet named 'README', `'df_users` to a sheet named 'users', 'df_apps' to sheet names 'apps' and df_data into sheet named 'data'
- Use `pandas.ExcelWriter` with `openpyxl` as the engine and date_format of YYYY-MM-DD
- Ensure the output file is saved correctly and does not include index columns in the Excel output.
- error handling.   Any issues should result in raised exceptions with suitable error strings

Generate comprehensive pytests for all negative and positive cases suitable for a file named test_{{target_function_name}}.py


#### COMMON instructions BEGIN

The function must follow current Python best practices, including:
- Type hints for input and output
- A docstring formatted with Google-style conventions
- Input validation: raise `TypeError` if inputs do not match type hints
- Clear and descriptive variable names
- PEP 8 formatting and clean structure
- Ready for inclusion in a larger codebase or module
- Ensure that all required parameters are present and are of the correct python type
- Generated code should pass Pylint with a score of 9.0+ and avoid global variables
- At the top of every file generated, include a comment block with:
  - GENERATED FILE - DO NOT EDIT DIRECTLY.
  - Prompt: [prompt_name]  Version: [version]
  - Generated by:[LLM name and version].
  - Timestamp:[current time in ISO 8601 format and UTC timezone]
#### COMMON instructions END






