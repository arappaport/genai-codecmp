# Parameters:
prompt_name = "count_app_users.txt"
version = "1.1"
target_function_name: "count_app_users"

Write a production-grade Python function named {{target_function_name}} accepts:
1. A pandas DataFrame named `df`.  It should not be empty.  It should have at least one column

It returns a list of dicts named app_usage.    Each dict contains the following values:
- app: str
- nusers:int
- percusers:float


The function should:
For each column in df
- create a new dict and add to bottom of app_usage
- write values into the dict for the following keys:
   - app = column name
   - nusers =  sum of the column
   - perusers = sum of the column / len of the column

return app_usage

- error handling.   Any issues should result in raised exceptions with suitable error strings

Generate comprehensive pytests for all negative and positive cases suitable for a file named test_{{target_function_name}}.py


#### COMMON instructions BEGIN

The function must follow current Python best practices, including:
- Type hints for input and output
- A docstring formatted with Google-style conventions
- Input validation: raise `TypeError` if inputs do not match type hints
- Clear and descriptive variable names
- PEP 8 formatting and clean structure
- Ready for inclusion in a larger codebase or module
- Ensure that all required parameters are present and are of the correct python type
- Generated code should pass Pylint with a score of 9.0+ and avoid global variables
- At the top of every file generated, include a comment block with:
  - GENERATED FILE - DO NOT EDIT DIRECTLY.
  - Prompt: [prompt_name]  Version: [version]
  - Generated by:[LLM name and version].
  - Timestamp:[current time in ISO 8601 format and UTC timezone]
#### COMMON instructions END






